AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Passhelper

Parameters:
  DomainName:
    Description: Domain name, this domain must be associated with the hosted zone above
    Type: String
  InitialUserEmailAddress:
    Description: The email address for the first user
    Type: String
  EmailAddress:
    Description: Email address reminders emails will be sent from
    Type: String
    Default: reminders
  IncludeHealthRoute:
    Description: Set to true to include the GET /health route
    Type: String
    Default: 'false'

Conditions:
  ShouldIncludeHealthRoute: !Equals [!Ref IncludeHealthRoute, 'true']

Resources:

  Route53HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub 'passports.${DomainName}'

  RootDomainNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub 'passports.${DomainName}'
      HostedZoneName: !Sub '${DomainName}.'
      ResourceRecords:
        !GetAtt Route53HostedZone.NameServers
      Type: NS
      TTL: "172800"

  SSLCert:
    DependsOn: [ RootDomainNSRecord ]
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub 'passports.${DomainName}'
      SubjectAlternativeNames:
        - !Sub 'auth.passports.${DomainName}'
      DomainValidationOptions:
        - DomainName: 'passports.${DomainName}'
          HostedZoneId: !Ref Route53HostedZone
      ValidationMethod: DNS

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref ApiDomainName
      HostedZoneId: !Ref Route53HostedZone
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId
      Type: A

  ApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub 'passports.${DomainName}'
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref SSLCert

  Email:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref ApiDomainName
      DkimAttributes:
        SigningEnabled: true

  Dkim1Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      Name: !GetAtt Email.DkimDNSTokenName1
      ResourceRecords:
        - !GetAtt Email.DkimDNSTokenValue1
      TTL: '300'
      Type: CNAME

  Dkim2Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      Name: !GetAtt Email.DkimDNSTokenName2
      ResourceRecords:
        - !GetAtt Email.DkimDNSTokenValue2
      TTL: '300'
      Type: CNAME

  Dkim3Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      Name: !GetAtt Email.DkimDNSTokenName3
      ResourceRecords:
        - !GetAtt Email.DkimDNSTokenValue3
      TTL: '300'
      Type: CNAME

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Schema:
        - Name: isOwner
          AttributeDataType: Boolean
          Mutable: false
          Required: false
        - Name: emailEnabled
          AttributeDataType: Boolean
          Mutable: true
          Required: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
      AllowedOAuthFlowsUserPoolClient: true
      UserPoolId: !Ref UserPool
      GenerateSecret: true
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub 'https://${ApiDomainName}/login'
      LogoutURLs:
        - !Sub 'https://${ApiDomainName}/logout'

  CognitoUserPoolDomain:
    DependsOn: [ RootDomainNSRecord, DNSRecord, SSLCert ]
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub 'auth.passports.${DomainName}'
      UserPoolId: !Ref UserPool
      CustomDomainConfig:
        CertificateArn: !Ref SSLCert

  CognitoUserPoolDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub 'auth.passports.${DomainName}'
      HostedZoneId: !Ref Route53HostedZone
      AliasTarget:
        DNSName: !GetAtt CognitoUserPoolDomain.CloudFrontDistribution
        EvaluateTargetHealth: false
        # magic hosted zone id https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/241
        HostedZoneId: Z2FDTNDATAQYW2
      Type: A

  InitialUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref UserPool
      Username: !Ref InitialUserEmailAddress
      DesiredDeliveryMediums:
        - EMAIL
      UserAttributes:
        - Name: email
          Value: !Ref InitialUserEmailAddress
        - Name: email_verified
          Value: 'true'
        - Name: custom:isOwner
          Value: 'true'
        - Name: custom:emailEnabled
          Value: 'false'

  HttpApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      DomainName: !Ref ApiDomainName
      Stage: !Ref Stage

  ApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-access"
      RetentionInDays: 7

  Integration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Api
      PayloadFormatVersion: '2.0'
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations'

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn: [ ApiGatewayRoutes ]
    Properties:
      StageName: v1
      ApiId: !Ref Api
      AutoDeploy: true
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
      AccessLogSettings:
        DestinationArn: !GetAtt ApiAccessLogs.Arn
        #        https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-logging-variables.html
        Format: >-
          {
          "httpMethod":"$context.httpMethod",
          "integrationStatus":"$context.integrationStatus",
          "dataProcessed":"$context.dataProcessed",
          "errorMessage":"$context.error.message",
          "integrationErrorMessage":"$context.integrationErrorMessage",
          "errorResponseType":"$context.error.responseType",
          "sourceIp":"$context.identity.sourceIp",
          "userAgent":"$context.identity.userAgent",
          "integrationLatency":"$context.integration.latency",
          "integrationRequestId":"$context.integration.requestId",
          "path":"$context.path",
          "protocol":"$context.protocol",
          "requestId":"$context.requestId",
          "requestTime":"$context.requestTime",
          "requestTimeEpoch":"$context.requestTimeEpoch",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength",
          "routeKey":"$context.routeKey",
          "status":"$context.status"
          }

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}"
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - 'OPTIONS'
          - 'POST'
          - 'GET'
        AllowHeaders:
          - 'cookie'
          - 'authorization'
          - 'location'

  ApiGatewayRoutes:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Api: !Ref Api
        Integration: !Ref Integration
      TemplateURL: ./passhelper.api.routes.cf.yaml

  LogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ApiFunction}"
      RetentionInDays: 1

  NotificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${NotificationFunction}"
      RetentionInDays: 1

  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:Describe*
                  - dynamodb:Get*
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:ListStreams
                  - dynamodb:UpdateTimeToLive
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PassportsDynamoDB}*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PassportsDynamoDB}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PassportNotificationsDynamoDB}*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PassportNotificationsDynamoDB}"
        - PolicyName: SQSDlq
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt DeadLetterQueue.Arn
        - PolicyName: SES
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
        - PolicyName: S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${ICSBucket}/*"
                  - !Sub "arn:aws:s3:::${ICSBucket}"
        - PolicyName: Cognito
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                  - cognito-idp:ListUsers
                  - cognito-idp:AdminDisableUser
                  - cognito-idp:AdminEnableUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:UpdateUserAttributes
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminResetUserPassword
                Resource:
                  - !GetAtt UserPool.Arn

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: io.eyecu.passhelper.lambda.APIGatewayEntrypoint::handleRequest
      Runtime: provided.al2023
      Role: !GetAtt FunctionExecutionRole.Arn
      Timeout: 300
      MemorySize: 128
      Architectures:
        - arm64
      FunctionName: !Sub "${AWS::StackName}-api"
      Environment:
        Variables:
          REGION: !Sub "${AWS::Region}"
          PASSPORT_TABLE_NAME: !Ref PassportsDynamoDB
          PASSPORT_NOTIFICATIONS_TABLE_NAME: !Ref PassportNotificationsDynamoDB
          COGNITO_CLIENT_ID: !Ref UserPoolClient
          COGNITO_CLIENT_SECRET: !GetAtt UserPoolClient.ClientSecret
          COGNITO_USER_POOL_ID: !Ref UserPool
          COGNITO_HOSTED_UI_URL: !Ref CognitoUserPoolDomain
          DOMAIN_NAME: !Ref ApiDomainName
          ICS_BUCKET_NAME: !Ref ICSBucket
    Metadata:
      BuildMethod: makefile

  HealthRoute:
    Condition: ShouldIncludeHealthRoute
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: 'GET /health'
      Target: !Sub 'integrations/${Integration}'

  FunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ApiFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: io.eyecu.passhelper.lambda.NotificationListenerEntrypoint::handleRequest
      Runtime: provided.al2023
      Role: !GetAtt FunctionExecutionRole.Arn
      Timeout: 300
      MemorySize: 128
      Architectures:
        - arm64
      FunctionName: !Sub "${AWS::StackName}-notifications"
      Environment:
        Variables:
          EMAIL_DOMAIN: !Ref ApiDomainName
          EMAIL_NAME: !Ref EmailAddress
          PASSPORT_TABLE_NAME: !Ref PassportsDynamoDB
          COGNITO_USER_POOL_ID: !Ref UserPool
    Metadata:
      BuildMethod: makefile

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # 14 Days

  PassportsDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}.passports"
      AttributeDefinitions:
        - AttributeName: "name"
          AttributeType: "S"
        - AttributeName: "identifier"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "name"
          KeyType: "HASH"
        - AttributeName: "identifier"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  PassportNotificationsDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}.passport-notifications"
      AttributeDefinitions:
        - AttributeName: "name"
          AttributeType: "S"
        - AttributeName: "identifier"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "name"
          KeyType: "HASH"
        - AttributeName: "identifier"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: "expires"
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: KEYS_ONLY

  SourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt PassportNotificationsDynamoDB.StreamArn
      FunctionName: !Ref NotificationFunction
      StartingPosition: TRIM_HORIZON
      BatchSize: 100
      BisectBatchOnFunctionError: true
      MaximumBatchingWindowInSeconds: 10
      MaximumRetryAttempts: 1
      DestinationConfig:
        OnFailure:
          Destination: !GetAtt DeadLetterQueue.Arn

  ICSBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${AWS::StackName}-${AWS::Region}-ics"
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 1
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

## Note: This stack will visually customize the Cognito login page.
## Note: Running this stack will change the login page style to match the app.
## Note: Unfortunately due to timing issues, this stack cannot be applied when
## Note: standing up a new service.
## Note: To work around this on an initial deployment, leave this stack commented out.
## Note: After the initial deployment is complete, you can uncomment this stack and rerun
## Note: the deployment.
## Note:
  CognitoCustomizations:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        UserPoolId: !Ref UserPool
        UserPoolArn: !GetAtt UserPool.Arn
      TemplateURL: ./passhelper.cognito.customization.cf.yaml
